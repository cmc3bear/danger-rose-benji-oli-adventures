name: Danger Rose Game CI/CD üéÆ

on:
  push:
    branches:
      - main
      - dev
      - feat/*
      - fix/*
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  GAME_NAME: 'DangerRose'

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install dependencies
        run: poetry install --no-interaction
        
      - name: Run linting
        run: |
          poetry run ruff check src/ tests/
          
      - name: Run formatting check
        run: |
          poetry run ruff format --check src/ tests/
          
      - name: Run tests
        run: |
          poetry run pytest tests/unit -v --cov=src --cov-report=xml --cov-report=html
          
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/

  test-game:
    name: Test Game Launch
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Install dependencies
        run: poetry install --no-interaction
        
      - name: Test game startup (headless)
        run: |
          poetry run python -c "import pygame; pygame.init(); print('Pygame initialized successfully')"
          
      - name: Verify assets
        run: |
          poetry run python -c "
import os
import sys
assets_dir = 'assets'
required_dirs = ['audio/music', 'audio/sfx', 'images/characters', 'images/tilesets']
missing = []
for d in required_dirs:
    path = os.path.join(assets_dir, d)
    if not os.path.exists(path):
        missing.append(path)
if missing:
    print(f'Missing directories: {missing}')
    sys.exit(1)
print('All asset directories present')
"

  build-executables:
    name: Build Game Executables
    needs: [quality-checks, test-game]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: Windows
            artifact: DangerRose-Windows
          - os: ubuntu-latest
            name: Linux
            artifact: DangerRose-Linux
          - os: macos-latest
            name: macOS
            artifact: DangerRose-macOS
            
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Install dependencies
        run: poetry install --no-interaction
        
      - name: Build with PyInstaller
        run: |
          poetry run pyinstaller danger-rose-onefile.spec --noconfirm
          
      - name: Create distribution folder
        shell: bash
        run: |
          mkdir -p dist-upload
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cp dist/DangerRose.exe dist-upload/
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            cp dist/DangerRose dist-upload/DangerRose
            chmod +x dist-upload/DangerRose
          else
            cp dist/DangerRose dist-upload/DangerRose
            chmod +x dist-upload/DangerRose
          fi
          
      - name: Add README to distribution
        shell: bash
        run: |
          cat > dist-upload/README.txt << 'EOF'
          Danger Rose - Family Adventure Game
          ===================================
          
          How to Run:
          - Windows: Double-click DangerRose.exe
          - macOS/Linux: Run ./DangerRose in terminal
          
          Controls:
          - Arrow Keys: Move
          - Space: Jump/Select
          - ESC: Pause/Back
          
          Enjoy the game!
          EOF
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: dist-upload/

  create-release:
    name: Create GitHub Release
    needs: build-executables
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Windows build
        uses: actions/download-artifact@v4
        with:
          name: DangerRose-Windows
          path: builds/windows/
          
      - name: Download Linux build
        uses: actions/download-artifact@v4
        with:
          name: DangerRose-Linux
          path: builds/linux/
          
      - name: Download macOS build
        uses: actions/download-artifact@v4
        with:
          name: DangerRose-macOS
          path: builds/macos/
          
      - name: Create zip archives
        run: |
          cd builds
          zip -r ../DangerRose-Windows.zip windows/
          zip -r ../DangerRose-Linux.zip linux/
          zip -r ../DangerRose-macOS.zip macos/
          cd ..
          
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Danger Rose ${{ steps.get_version.outputs.VERSION }}
          body: |
            # Danger Rose ${{ steps.get_version.outputs.VERSION }}
            
            A family-friendly adventure game featuring Danger, Rose, and Dad!
            
            ## üéÆ Download & Play
            
            - **Windows**: Download `DangerRose-Windows.zip`, extract, and run `DangerRose.exe`
            - **macOS**: Download `DangerRose-macOS.zip`, extract, and run `DangerRose`
            - **Linux**: Download `DangerRose-Linux.zip`, extract, and run `DangerRose`
            
            ## üéØ What's New
            
            Check out the [full changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
            
            ## üïπÔ∏è Game Features
            
            - **3 Playable Characters**: Each with unique abilities
            - **Hub World**: Cozy apartment to explore
            - **3 Minigames**: Ski adventure, Pool splash, Vegas dash
            - **Family Fun**: Designed for parents and kids to enjoy together
            
            ## üêõ Bug Reports
            
            Found a bug? Please [create an issue](https://github.com/${{ github.repository }}/issues/new)
            
            ---
            
            **System Requirements**:
            - Windows 10/11, macOS 10.15+, or Linux
            - 2GB RAM minimum
            - 200MB free disk space
          files: |
            DangerRose-Windows.zip
            DangerRose-Linux.zip
            DangerRose-macOS.zip
          draft: false
          prerelease: false

  deploy-nightly:
    name: Deploy Nightly Build
    needs: build-executables
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      
    steps:
      - name: Download all builds
        uses: actions/download-artifact@v4
        with:
          path: builds/
          
      - name: Create nightly tag
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];
            const tagName = `nightly-${date}`;
            
            try {
              // Delete existing nightly tag if it exists
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tagName}`
              });
            } catch (error) {
              // Tag doesn't exist, that's fine
            }
            
            // Create new nightly tag
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: context.sha
            });
            
            console.log(`Created nightly tag: ${tagName}`);